// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { HealthCheckData, HealthCheckResponses, GetProjectData, GetProjectResponses, GetProjectErrors, RegenerateApiKeyData, RegenerateApiKeyResponses, RegenerateApiKeyErrors, ListFilesData, ListFilesResponses, ListFilesErrors, WriteFileData, WriteFileResponses, WriteFileErrors, ReadFileData, ReadFileResponses, ReadFileErrors, EditFileData, EditFileResponses, EditFileErrors, AppendFileData, AppendFileResponses, AppendFileErrors, OverwriteFileData, OverwriteFileResponses, OverwriteFileErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Health check
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthCheckResponses, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Get project info
 */
export const getProject = <ThrowOnError extends boolean = false>(options?: Options<GetProjectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProjectResponses, GetProjectErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/project',
        ...options
    });
};

/**
 * Regenerate API key
 */
export const regenerateApiKey = <ThrowOnError extends boolean = false>(options?: Options<RegenerateApiKeyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RegenerateApiKeyResponses, RegenerateApiKeyErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/project/apikey/regenerate',
        ...options
    });
};

/**
 * List files in a directory
 * List files in a specific directory. When called on the root directory ('/'), this only returns files in the root directory and excludes files in subdirectories. To see all files across all directories, use `?recursive=true` parameter.
 */
export const listFiles = <ThrowOnError extends boolean = false>(options?: Options<ListFilesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListFilesResponses, ListFilesErrors, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/files',
        ...options
    });
};

/**
 * Write file
 */
export const writeFile = <ThrowOnError extends boolean = false>(options: Options<WriteFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WriteFileResponses, WriteFileErrors, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/files',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read file or get metadata
 */
export const readFile = <ThrowOnError extends boolean = false>(options: Options<ReadFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadFileResponses, ReadFileErrors, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/files/{path}',
        ...options
    });
};

/**
 * Edit file with string replacement
 */
export const editFile = <ThrowOnError extends boolean = false>(options: Options<EditFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<EditFileResponses, EditFileErrors, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/files/edit/{path}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Append content to file
 */
export const appendFile = <ThrowOnError extends boolean = false>(options: Options<AppendFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AppendFileResponses, AppendFileErrors, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/files/append/{path}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Overwrite file content completely
 */
export const overwriteFile = <ThrowOnError extends boolean = false>(options: Options<OverwriteFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<OverwriteFileResponses, OverwriteFileErrors, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/files/overwrite/{path}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};