// This file is auto-generated by @hey-api/openapi-ts

export type WriteFileRequest = {
    path: string;
    content: string;
    /**
     * MIME type of the file content. Must be one of the supported types.
     */
    contentType?: 'text/markdown' | 'text/plain' | 'text/javascript' | 'text/typescript' | 'application/json' | 'text/html' | 'text/css' | 'text/x-python' | 'text/x-java-source' | 'text/x-c++src' | 'text/x-csrc' | 'application/xml' | 'application/yaml' | 'text/csv' | 'image/jpeg' | 'image/png' | 'image/gif' | 'image/webp' | 'image/bmp' | 'image/svg+xml' | 'application/pdf' | 'application/zip' | 'audio/mpeg' | 'video/mp4' | 'video/x-msvideo' | 'video/quicktime' | 'application/octet-stream';
    isBase64?: boolean;
};

export type EditFileRequest = {
    oldString: string;
    newString: string;
};

export type AppendFileRequest = {
    content: string;
};

export type OverwriteFileRequest = {
    content: string;
    isBase64?: boolean;
};

export type FileMetadata = {
    id?: string;
    path?: string;
    version?: number;
    mimeType?: string;
    size?: number;
    createdAt?: string;
    updatedAt?: string;
};

export type ProjectResponse = {
    success: boolean;
    data: {
        id?: string;
        name?: string;
        userId?: string;
    };
};

export type ApiKeyResponse = {
    success: boolean;
    data: {
        apiKey?: string;
    };
};

export type FileOperationResponse = {
    success: boolean;
    data: FileMetadata;
    operation: string;
    message: string;
};

export type FileContentResponse = {
    success: boolean;
    data: {
        id?: string;
        path?: string;
        content?: string;
        version?: number;
        mimeType?: string;
        size?: number;
        createdAt?: string;
        updatedAt?: string;
    };
    operation: string;
    message: string;
};

export type FileMetadataResponse = {
    success: boolean;
    data: FileMetadata;
    operation: string;
    message: string;
};

export type FileVersionsResponse = {
    success: boolean;
    data: {
        file?: {
            path?: string;
            mimeType?: string;
        };
        versions?: Array<{
            version?: number;
            size?: number;
            createdAt?: string;
            updatedAt?: string;
        }>;
        total?: number;
        limit?: number;
        offset?: number;
    };
    operation: string;
    message: string;
};

export type FileListResponse = {
    success: boolean;
    data: {
        files?: Array<FileMetadata>;
        total?: number;
        limit?: number;
        offset?: number;
    };
    operation: string;
    message: string;
};

export type ErrorResponse = {
    success: boolean;
    error: {
        code: string;
        message: string;
    };
    operation?: string;
    details?: {
        [key: string]: unknown;
    };
};

export type HealthResponse = {
    status: 'ok';
    timestamp: string;
    message: string;
    version: string;
};

export type HealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthCheckResponses = {
    /**
     * Service healthy
     */
    200: HealthResponse;
};

export type HealthCheckResponse = HealthCheckResponses[keyof HealthCheckResponses];

export type GetProjectData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/project';
};

export type GetProjectErrors = {
    /**
     * Authentication required
     */
    401: ErrorResponse;
};

export type GetProjectError = GetProjectErrors[keyof GetProjectErrors];

export type GetProjectResponses = {
    /**
     * Success
     */
    200: ProjectResponse;
};

export type GetProjectResponse = GetProjectResponses[keyof GetProjectResponses];

export type RegenerateApiKeyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/project/apikey/regenerate';
};

export type RegenerateApiKeyErrors = {
    /**
     * Authentication required
     */
    401: ErrorResponse;
};

export type RegenerateApiKeyError = RegenerateApiKeyErrors[keyof RegenerateApiKeyErrors];

export type RegenerateApiKeyResponses = {
    /**
     * Success
     */
    200: ApiKeyResponse;
};

export type RegenerateApiKeyResponse = RegenerateApiKeyResponses[keyof RegenerateApiKeyResponses];

export type ListFilesData = {
    body?: never;
    path?: never;
    query?: {
        directory?: string;
        contentType?: string;
        limit?: number;
        offset?: number;
        minSize?: number;
        maxSize?: number;
        createdAfter?: string;
        createdBefore?: string;
        updatedAfter?: string;
        updatedBefore?: string;
        sortBy?: 'path' | 'created_at' | 'updated_at' | 'size';
        sortOrder?: 'asc' | 'desc';
    };
    url: '/files';
};

export type ListFilesErrors = {
    /**
     * Authentication required
     */
    401: ErrorResponse;
};

export type ListFilesError = ListFilesErrors[keyof ListFilesErrors];

export type ListFilesResponses = {
    /**
     * Success
     */
    200: FileListResponse;
};

export type ListFilesResponse = ListFilesResponses[keyof ListFilesResponses];

export type WriteFileData = {
    body: WriteFileRequest;
    path?: never;
    query?: never;
    url: '/files';
};

export type WriteFileErrors = {
    /**
     * Invalid request
     */
    400: ErrorResponse;
    /**
     * Authentication required
     */
    401: ErrorResponse;
    /**
     * Resource conflict
     */
    409: ErrorResponse;
};

export type WriteFileError = WriteFileErrors[keyof WriteFileErrors];

export type WriteFileResponses = {
    /**
     * Success
     */
    200: FileOperationResponse;
};

export type WriteFileResponse = WriteFileResponses[keyof WriteFileResponses];

export type ReadFileData = {
    body?: never;
    path: {
        path: string;
    };
    query?: {
        version?: number;
        metadata?: '';
        versions?: '';
        limit?: number;
        offset?: number;
    };
    url: '/files/{path}';
};

export type ReadFileErrors = {
    /**
     * Authentication required
     */
    401: ErrorResponse;
    /**
     * Resource not found
     */
    404: ErrorResponse;
};

export type ReadFileError = ReadFileErrors[keyof ReadFileErrors];

export type ReadFileResponses = {
    /**
     * Success
     */
    200: FileContentResponse | FileMetadataResponse | FileVersionsResponse;
};

export type ReadFileResponse = ReadFileResponses[keyof ReadFileResponses];

export type EditFileData = {
    body: EditFileRequest;
    path: {
        /**
         * File path (S3-style, no leading slash)
         */
        path: string;
    };
    query?: never;
    url: '/files/edit/{path}';
};

export type EditFileErrors = {
    /**
     * Invalid request
     */
    400: ErrorResponse;
    /**
     * Authentication required
     */
    401: ErrorResponse;
    /**
     * Resource not found
     */
    404: ErrorResponse;
    /**
     * Business rule violation
     */
    422: ErrorResponse;
};

export type EditFileError = EditFileErrors[keyof EditFileErrors];

export type EditFileResponses = {
    /**
     * Success
     */
    200: FileOperationResponse;
};

export type EditFileResponse = EditFileResponses[keyof EditFileResponses];

export type AppendFileData = {
    body: AppendFileRequest;
    path: {
        /**
         * File path (S3-style, no leading slash)
         */
        path: string;
    };
    query?: never;
    url: '/files/append/{path}';
};

export type AppendFileErrors = {
    /**
     * Invalid request
     */
    400: ErrorResponse;
    /**
     * Authentication required
     */
    401: ErrorResponse;
    /**
     * Resource not found
     */
    404: ErrorResponse;
    /**
     * Business rule violation
     */
    422: ErrorResponse;
};

export type AppendFileError = AppendFileErrors[keyof AppendFileErrors];

export type AppendFileResponses = {
    /**
     * Success
     */
    200: FileOperationResponse;
};

export type AppendFileResponse = AppendFileResponses[keyof AppendFileResponses];

export type OverwriteFileData = {
    body: OverwriteFileRequest;
    path: {
        /**
         * File path (S3-style, no leading slash)
         */
        path: string;
    };
    query?: never;
    url: '/files/overwrite/{path}';
};

export type OverwriteFileErrors = {
    /**
     * Invalid request
     */
    400: ErrorResponse;
    /**
     * Authentication required
     */
    401: ErrorResponse;
    /**
     * Resource not found
     */
    404: ErrorResponse;
};

export type OverwriteFileError = OverwriteFileErrors[keyof OverwriteFileErrors];

export type OverwriteFileResponses = {
    /**
     * Success
     */
    200: FileOperationResponse;
};

export type OverwriteFileResponse = OverwriteFileResponses[keyof OverwriteFileResponses];

export type ClientOptions = {
    baseUrl: 'https://api.openfiles.ai/functions/v1/api' | (string & {});
};